{"version":3,"sources":["services/youtube.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["youtube","inputURL","matches","exec","App","useState","url","setUrl","embedUrl","setEmbedUrl","handleOnChangeUrl","useCallback","event","value","target","handleConvert","youtubeTransform","className","action","type","placeholder","onChange","onClick","href","data-size","data-show-count","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAWeA,EAXC,SAACC,GACb,IACMC,EADiB,uFACDC,KAAKF,GAE3B,OAAIC,EAIE,sBAAN,OAA8BA,EAAQ,IAAM,GAA5C,sBAA6DA,EAAQ,IAH1DD,G,MCyCAG,MA1Cf,WAAgB,IAAD,EAC6BC,mBAAS,IADtC,mBACNC,EADM,KACDC,EADC,OAEuCF,mBAAS,IAFhD,mBAENG,EAFM,KAEIC,EAFJ,KAIPC,EAAoBC,uBAAY,SAACC,GAAgD,IACrEC,EAAUD,EAAnBE,OAASD,MAChBN,EAAOM,KACN,CAACN,IAEEQ,EAAgBJ,uBAAY,WAChCF,EAAYO,EAAiBV,MAC7B,CAACA,EAAKG,IAER,OACE,yBAAKQ,UAAU,OACb,4BAAQA,UAAU,cAChB,sDACA,uDAEA,0BAAMC,OAAO,KACX,2BAAG,2BAAOC,KAAK,OAAOF,UAAU,YAAYG,YAAY,6BAA6BC,SAAUX,EAAmBG,MAAOP,KACzH,2BAAG,4BAAQW,UAAU,aAAaK,QAASP,GAAxC,kBACFP,GACC,6BACE,+CACA,2BAAIA,KAMV,uBAAGS,UAAU,kBACX,uBAAGA,UAAU,gBAAgBM,KAAK,mDAAmDC,YAAU,QAAQC,kBAAgB,OAAOC,aAAW,gDAAzI,QACA,uBAAGT,UAAU,gBAAgBM,KAAK,gEAAgEC,YAAU,QAAQC,kBAAgB,OAAOC,aAAW,iDAAtJ,SACA,uBAAGT,UAAU,gBAAgBM,KAAK,0DAA0DC,YAAU,QAAQC,kBAAgB,OAAOC,aAAW,iDAAhJ,aC1BUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9a8a677b.chunk.js","sourcesContent":["const youtube = (inputURL: string): string => {\n    const regex : RegExp = /(youtube(-nocookie)?\\.com|youtu\\.be)\\/(watch\\?v=|v\\/|u\\/|embed\\/?)?([\\w-]{11})(.*)?/i;\n    const matches = regex.exec(inputURL)\n    \n    if(!matches){\n        return inputURL\n    }\n\n    return `https://www.youtube${(matches[2] || '')}.com/embed/${matches[4]}`\n}\n\nexport default youtube;","import React,{useCallback, useState, useEffect, ChangeEvent} from 'react';\nimport youtubeTransform from './services/youtube'\nimport './App.css';\n\nfunction App() {\n  const [url, setUrl]: [string, Function] = useState('')\n  const [embedUrl, setEmbedUrl]: [string, Function] = useState('')\n\n  const handleOnChangeUrl = useCallback((event: ChangeEvent<HTMLInputElement>): void => {\n    const {target: {value}} = event\n    setUrl(value)\n  }, [setUrl])\n\n  const handleConvert = useCallback(() =>{\n    setEmbedUrl(youtubeTransform(url))\n  },[url, setEmbedUrl])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Video url to embed url</h1>\n        <p>Youtube, Facebook, Vimeo</p>\n        \n        <form action=\"#\">\n          <p><input type=\"text\" className=\"url-input\" placeholder=\"Enter your video url here.\" onChange={handleOnChangeUrl} value={url} /></p>\n          <p><button className=\"submit-btn\" onClick={handleConvert}>Get embed url</button></p>\n          {embedUrl &&\n            <div>\n              <h2>Your embed url:</h2>\n              <p>{embedUrl}</p>\n            </div>\n          }\n        </form>\n\n\n        <p className=\"github-buttons\">\n          <a className=\"github-button\" href=\"https://github.com/luispeerez/video-to-embed-url\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star luispeerez/video-to-embed-url on GitHub\">Star</a>\n          <a className=\"github-button\" href=\"https://github.com/luispeerez/video-to-embed-url/subscription\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Watch luispeerez/video-to-embed-url on GitHub\">Watch</a>\n          <a className=\"github-button\" href=\"https://github.com/luispeerez/video-to-embed-url/issues\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Issue luispeerez/video-to-embed-url on GitHub\">Issue</a>\n        </p>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}